/**
 *后序遍历递归
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<Integer> postorderTraversal(TreeNode root) {
        if(root==null){
            return new ArrayList<>();
        }
        List<Integer> list=new ArrayList<>();
        list.addAll(postorderTraversal(root.left));
        list.addAll(postorderTraversal(root.right));
        list.add(root.val);
        return list;
    }
}


/**
 *后序遍历迭代
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<Integer> postorderTraversal(TreeNode root) {
        if(root==null){
            return new ArrayList<>();
        }
        Stack<TreeNode> stack=new Stack<>();
        List<Integer> list=new ArrayList<>();
        stack.push(root);//根节点入栈
        while(!stack.empty()){
            TreeNode node=stack.peek();//取出当前节点但不删除           
            if(node.right==null && node.left==null){//如果当前节点的左右子节点为null，则访问当前节点，并从栈中删除此节点
                list.add(node.val);
                stack.pop();
            }else{//当前节点的左右子节点不全为null，有则入栈，右子节点先入栈
                if(node.right!=null){
                    stack.push(node.right);
                    node.right=null;//将当前节点的右子节点置为null，防止死循环
                }
                if(node.left!=null){
                    stack.push(node.left);
                    node.left=null;//将当前节点的左子节点置为null，防止死循环
                }
            }           
        }
        return list;
    }
}