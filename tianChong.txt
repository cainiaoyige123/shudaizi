/*
// Definition for a Node.
class Node {
    public int val;
    public Node left;
    public Node right;
    public Node next;

    public Node() {}

    public Node(int _val,Node _left,Node _right,Node _next) {
        val = _val;
        left = _left;
        right = _right;
        next = _next;
    }
};
*/
class Solution {
    public Node connect(Node root) {
        if(root==null){//根节点为null，则直接返回
            return root;
        }
        LinkedList<Node> queue=new LinkedList<>();
        queue.offer(root);//根节点入队列
        while(queue.size()!=0){
            int len=queue.size();
            for(int i=0;i<len;i++){//将每一层节点，先访问，然后将该节点的左右子节点插入队列
                if(i==len-1){//每层最后一个节点
                    Node node=queue.poll();
                    node.next=null;
                    if(node.left!=null){//有左右子节点则插入
                        queue.offer(node.left);
                    }
                    if(node.right!=null){
                        queue.offer(node.right);
                    } 
                }else{//每层前面的节点
                    Node node=queue.poll();
                    node.next=queue.peek();
                    if(node.left!=null){
                        queue.offer(node.left);
                    }
                    if(node.right!=null){
                        queue.offer(node.right);
                    }
                }
            }
        }
        return root;//返回
    }
}